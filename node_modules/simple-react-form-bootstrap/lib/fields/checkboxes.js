'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _reactBootstrap = require('react-bootstrap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  inline: _react2.default.PropTypes.bool,
  parentClassName: _react2.default.PropTypes.string,
  options: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    label: _react2.default.PropTypes.string.isRequired,
    value: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number]).isRequired
  }))
};

var defaultProps = {
  inline: false,
  parentClassName: ''
};

var CheckboxesComponent = function (_React$Component) {
  _inherits(CheckboxesComponent, _React$Component);

  function CheckboxesComponent(props) {
    _classCallCheck(this, CheckboxesComponent);

    var _this = _possibleConstructorReturn(this, (CheckboxesComponent.__proto__ || Object.getPrototypeOf(CheckboxesComponent)).call(this, props));

    _this.state = {
      value: props.value
    };
    return _this;
  }

  _createClass(CheckboxesComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({ value: nextProps.value });
    }
  }, {
    key: 'onCheck',
    value: function onCheck(value, values) {
      var newValues = [];
      if (_underscore2.default.contains(values, value)) {
        newValues = _underscore2.default.without(values, value);
      } else {
        newValues = _underscore2.default.union(values, [value]);
      }
      this.props.onChange(newValues);
    }
  }, {
    key: 'getOptions',
    value: function getOptions() {
      var options = [];
      if (this.props.options) {
        if (typeof this.props.options === 'function') {
          options = this.props.options();
        } else {
          options = this.props.options;
        }
      } else if (this.props.fieldSchema && this.props.fieldSchema.allowedValues) {
        var allowedValues = this.props.fieldSchema.allowedValues;
        if (typeof allowedValues === 'function') {
          allowedValues = this.props.fieldSchema.allowedValues();
        }
        options = _underscore2.default.map(allowedValues, function (allowedValue) {
          return {
            label: allowedValue,
            value: allowedValue
          };
        });
      } else {
        throw new Error('You must set the options for the radio field');
      }
      return options;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props;
      var fieldName = _props.fieldName;
      var label = _props.label;
      var errorMessage = _props.errorMessage;
      var inline = _props.inline;
      var parentClassName = _props.parentClassName;
      var value = this.state.value;


      return _react2.default.createElement(
        _reactBootstrap.FormGroup,
        { validationState: errorMessage ? 'error' : undefined },
        label ? _react2.default.createElement(
          _reactBootstrap.ControlLabel,
          null,
          label
        ) : null,
        _react2.default.createElement(
          'div',
          { className: parentClassName },
          this.getOptions().map(function (option, i) {
            return _react2.default.createElement(
              _reactBootstrap.Checkbox,
              {
                key: fieldName + '-' + i,
                name: fieldName,
                defaultValue: option.value,
                onChange: function onChange(event) {
                  return _this2.onCheck(event.target.value, value);
                },
                checked: _underscore2.default.contains(value, option.value),
                inline: inline,
                className: _underscore2.default.contains(value, option.value) && 'checked'
              },
              option.label
            );
          })
        ),
        errorMessage && _react2.default.createElement(
          _reactBootstrap.HelpBlock,
          null,
          errorMessage
        )
      );
    }
  }]);

  return CheckboxesComponent;
}(_react2.default.Component);

exports.default = CheckboxesComponent;


CheckboxesComponent.propTypes = propTypes;
CheckboxesComponent.defaultProps = defaultProps;