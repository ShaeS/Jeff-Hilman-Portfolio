'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectField = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _reactBootstrap = require('react-bootstrap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import TextField from 'material-ui/TextField';


var propTypes = {
  /**
   * The options for the select input. Each item must have label and value.
   */
  options: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({
    label: _react2.default.PropTypes.string.isRequired,
    value: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number]).isRequired
  }))
};

var defaultProps = {};

var SelectFieldComponent = function (_React$Component) {
  _inherits(SelectFieldComponent, _React$Component);

  function SelectFieldComponent(props) {
    _classCallCheck(this, SelectFieldComponent);

    var _this = _possibleConstructorReturn(this, (SelectFieldComponent.__proto__ || Object.getPrototypeOf(SelectFieldComponent)).call(this, props));

    _this.state = { value: props.value };
    return _this;
  }

  _createClass(SelectFieldComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState({ value: nextProps.value });
    }
  }, {
    key: 'onChange',
    value: function onChange(event) {
      this.setState({ value: event.target.value });
      this.props.onChange(event.target.value);
    }
  }, {
    key: 'renderItems',
    value: function renderItems() {
      var options = null;
      if (this.props.options) {
        options = this.props.options;
      } else if (this.props.fieldSchema && this.props.fieldSchema.allowedValues) {
        var allowedValues = this.props.fieldSchema.allowedValues;
        if (typeof allowedValues === 'function') {
          allowedValues = this.props.fieldSchema.allowedValues();
        }
        options = _underscore2.default.map(allowedValues, function (allowedValue) {
          return {
            label: allowedValue,
            value: allowedValue
          };
        });
      } else {
        throw new Error('You must set the options for the select field');
      }

      return options.map(function (item) {
        return _react2.default.createElement(
          'option',
          { key: item.value, value: item.value },
          item.label
        );
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var fieldType = this.props.fieldType || this.type;
      return _react2.default.createElement(
        _reactBootstrap.FormGroup,
        {
          validationState: this.props.errorMessage ? 'error' : undefined
        },
        this.props.label ? _react2.default.createElement(
          _reactBootstrap.ControlLabel,
          null,
          this.props.label
        ) : null,
        _react2.default.createElement(
          _reactBootstrap.FormControl,
          _extends({
            ref: 'input',
            value: this.state.value || '',
            type: fieldType,
            placeholder: this.props.placeholder || this.props.passProps.placeholder,
            disabled: this.props.disabled,
            onChange: this.onChange.bind(this),
            onBlur: function onBlur() {
              return _this2.props.onChange(_this2.state.value);
            },
            componentClass: 'select'
          }, this.props.passProps),
          this.renderItems()
        ),
        this.props.errorMessage && _react2.default.createElement(
          _reactBootstrap.HelpBlock,
          null,
          this.props.errorMessage
        )
      );
    }
  }]);

  return SelectFieldComponent;
}(_react2.default.Component);

SelectFieldComponent.propTypes = propTypes;
SelectFieldComponent.defaultProps = defaultProps;

exports.SelectField = SelectFieldComponent;