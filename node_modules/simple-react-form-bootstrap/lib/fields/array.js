'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayField = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactBootstrap = require('react-bootstrap');

var _simpleReactForm = require('simple-react-form');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BootstrapArray = function (_ArrayComponent) {
  _inherits(BootstrapArray, _ArrayComponent);

  function BootstrapArray() {
    _classCallCheck(this, BootstrapArray);

    return _possibleConstructorReturn(this, (BootstrapArray.__proto__ || Object.getPrototypeOf(BootstrapArray)).apply(this, arguments));
  }

  _createClass(BootstrapArray, [{
    key: 'renderChildrenItem',
    value: function renderChildrenItem(_ref) {
      var index = _ref.index;
      var children = _ref.children;

      return _react2.default.createElement(
        'div',
        { className: this.props.childrenClassName, key: this.props.fieldName + '.' + index },
        _react2.default.createElement(
          'div',
          { className: 'col-sm-11' },
          this.renderChildrenItemWithContext({ index: index, children: children })
        ),
        _react2.default.createElement(
          'div',
          { className: 'col-sm-1 text-right' },
          this.renderRemoveButton(index)
        )
      );
    }
  }, {
    key: 'renderRemoveButton',
    value: function renderRemoveButton(index) {
      var _this2 = this;

      if (this.props.disabled) {
        return;
      }
      return _react2.default.createElement(
        _reactBootstrap.Button,
        { bsStyle: 'danger', onClick: function onClick() {
            return _this2.removeItem(index);
          } },
        _react2.default.createElement('i', { className: this.props.removeButtonIcon })
      );
    }
  }, {
    key: 'renderAddButton',
    value: function renderAddButton() {
      var _this3 = this;

      if (!this.props.showAddButton) {
        return;
      }
      if (this.props.disabled) {
        return;
      }
      return _react2.default.createElement(
        _reactBootstrap.Button,
        { bsStyle: 'primary', onClick: function onClick() {
            return _this3.addItem();
          } },
        _react2.default.createElement('i', { className: this.props.addButtonIcon })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactBootstrap.FormGroup,
        { validationState: this.props.errorMessage ? 'error' : undefined },
        this.props.label ? _react2.default.createElement(
          _reactBootstrap.ControlLabel,
          null,
          this.props.label
        ) : null,
        _react2.default.createElement(
          'div',
          { className: this.props.parentClassName },
          this.renderChildren()
        ),
        _react2.default.createElement(
          'div',
          null,
          this.renderAddButton()
        ),
        this.props.errorMessage && _react2.default.createElement(
          _reactBootstrap.HelpBlock,
          null,
          this.props.errorMessage
        )
      );
    }
  }]);

  return BootstrapArray;
}(_simpleReactForm.ArrayComponent);

BootstrapArray.propTypes = _extends({}, _simpleReactForm.ArrayComponent.propTypes, {
  parentClassName: _react2.default.PropTypes.string,
  childrenClassName: _react2.default.PropTypes.string,
  addButtonIcon: _react2.default.PropTypes.string,
  removeButtonIcon: _react2.default.PropTypes.string
});

BootstrapArray.defaultProps = _extends({}, _simpleReactForm.ArrayComponent.defaultProps, {
  parentClassName: '',
  childrenClassName: 'row',
  addButtonIcon: 'fa fa-plus',
  removeButtonIcon: 'fa fa-minus'
});

exports.ArrayField = BootstrapArray;