'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeocoderField = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _simpleReactForm = require('simple-react-form');

var _reactBootstrap = require('react-bootstrap');

var _gmaps = require('./vendor/gmaps');

var _gmaps2 = _interopRequireDefault(_gmaps);

var _reactGoogleMaps = require('react-google-maps');

var _utils = require('react-google-maps/lib/utils');

var _ScriptjsLoader = require('react-google-maps/lib/async/ScriptjsLoader');

var _ScriptjsLoader2 = _interopRequireDefault(_ScriptjsLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import TextField from 'material-ui/TextField';


var propTypes = {
  zoom: _react2.default.PropTypes.number.isRequired,
  center: _react2.default.PropTypes.shape({
    lat: _react2.default.PropTypes.number.isRequired,
    lng: _react2.default.PropTypes.number.isRequired
  }).isRequired,
  restrictTo: _react2.default.PropTypes.string
};

var defaultProps = {};

var GeocoderFieldComponent = function (_FieldType) {
  _inherits(GeocoderFieldComponent, _FieldType);

  function GeocoderFieldComponent(props, context) {
    _classCallCheck(this, GeocoderFieldComponent);

    var _this = _possibleConstructorReturn(this, (GeocoderFieldComponent.__proto__ || Object.getPrototypeOf(GeocoderFieldComponent)).call(this, props, context));

    _this.state = {
      value: {
        address: props.value && props.value.address,
        lat: props.value && props.value.lat,
        lng: props.value && props.value.lng
      }
    };

    if (props.value && props.value.lat && props.value.lng) {
      _this.state.marker = {
        key: 'default',
        defaultAnimation: 2,
        position: {
          lat: props.value && props.value.lat,
          lng: props.value && props.value.lng
        }
      };
    }

    _this.geoSearch = _underscore2.default.debounce(_this.geoSearch.bind(_this), 200);
    _this.onWindowResize = _underscore2.default.throttle(_this.onWindowResize.bind(_this), 500);
    return _this;
  }

  _createClass(GeocoderFieldComponent, [{
    key: 'initialZoom',
    value: function initialZoom(map) {
      if (map && this.state.marker && this.state.marker.position) {
        map.panTo(this.state.marker.position);
      }
    }
  }, {
    key: 'onChange',
    value: function onChange(event) {
      var newState = _extends({}, this.state.value, {
        address: event.target.value
      });
      this.setState(newState);
      this.props.onChange(newState);
      this.geoSearch(event.target.value);
    }
  }, {
    key: 'onMapClick',
    value: function onMapClick(event) {
      this.setState({
        marker: {
          position: event.latLng,
          defaultAnimation: 2,
          key: Date.now()
        }
      });
      this.props.onChange({
        lat: event.latLng.lat(),
        lng: event.latLng.lng(),
        address: this.state.value && this.state.value.address
      });
    }
  }, {
    key: 'geoSearch',
    value: function geoSearch(placeName) {
      var self = this;
      _gmaps2.default.geocode({
        address: this.props.restrictTo ? placeName + ', ' + this.props.restrictTo : placeName,
        callback: function callback(data, status) {
          if (placeName === self.state.value.address && status === 'OK' && data.length > 0) {
            var geo = data[0].geometry.location;
            var newData = {
              lat: geo.lat(),
              lng: geo.lng(),
              address: placeName
            };
            self.setState({
              value: newData
            });
            self.props.onChange(newData);
          }
        }
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var newState = {
        value: nextProps.value
      };
      if (nextProps.value && nextProps.value.lat && nextProps.value.lng) {
        newState.marker = {
          key: 'default',
          defaultAnimation: 2,
          position: {
            lat: nextProps.value.lat,
            lng: nextProps.value.lng
          }
        };
        this._googleMapComponent.panTo(newState.marker.position);
      }

      this.setState(newState);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('resize', this.onWindowResize);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.onWindowResize);
    }
  }, {
    key: 'onWindowResize',
    value: function onWindowResize() {
      (0, _utils.triggerEvent)(this._googleMapComponent, 'resize');
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var marker = this.state.marker;


      return _react2.default.createElement(
        _reactBootstrap.FormGroup,
        {
          validationState: this.props.errorMessage ? 'error' : undefined
        },
        this.props.label ? _react2.default.createElement(
          _reactBootstrap.ControlLabel,
          null,
          this.props.label
        ) : null,
        _react2.default.createElement(_reactBootstrap.FormControl, _extends({
          ref: 'input',
          value: this.state.value && this.state.value.address || '',
          type: 'text',
          placeholder: this.props.placeholder || this.props.passProps.placeholder,
          disabled: this.props.disabled,
          onChange: this.onChange.bind(this),
          onBlur: function onBlur() {
            return _this2.props.onChange(_this2.state.value);
          },
          componentClass: 'input'
        }, this.props.passProps)),
        this.props.errorMessage && _react2.default.createElement(
          _reactBootstrap.HelpBlock,
          null,
          this.props.errorMessage
        ),
        _react2.default.createElement(_ScriptjsLoader2.default, {
          hostname: "maps.googleapis.com",
          pathname: "/maps/api/js",
          query: {
            v: '3',
            libraries: 'geometry,drawing,places',
            key: this.props.passProps.apiKey
          },
          loadingElement: _react2.default.createElement(
            'div',
            null,
            'Loading...'
          ),
          containerElement: _react2.default.createElement('div', _extends({}, this.props, {
            style: {
              height: '100%',
              minHeight: '300px'
            }
          })),
          googleMapElement: _react2.default.createElement(
            _reactGoogleMaps.GoogleMap,
            {
              ref: function ref(map) {
                _this2._googleMapComponent = map;
                _this2.initialZoom(map);
              },
              defaultZoom: this.props.zoom,
              defaultCenter: this.props.center,
              onClick: this.onMapClick.bind(this),
              options: { scrollwheel: false }
            },
            _react2.default.createElement(_reactGoogleMaps.Marker, marker)
          )
        })
      );
    }
  }]);

  return GeocoderFieldComponent;
}(_simpleReactForm.FieldType);

GeocoderFieldComponent.propTypes = propTypes;
GeocoderFieldComponent.defaultProps = defaultProps;

(0, _simpleReactForm.registerType)({
  type: 'geocoder',
  component: GeocoderFieldComponent
});

exports.GeocoderField = GeocoderFieldComponent;